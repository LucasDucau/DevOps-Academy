

#FALTA STOPPEAR EL DOCKER, CORRER sudo dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375 Y DESPUES ARRANCARLO DE NUEVO
#falta hacer que la api de go se agarre los archivos desde local en vez de tener que usar el fork en github.globant del original
#




---
##################################################
# This standalone playbook uses Docker's official Ubuntu 18.04 repository
# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04
##################################################

- hosts: localhost
  become: true
#  vars:
#    ansible_python_interpreter: "/usr/bin/env python3"

  tasks:
#  - name: apt-get update
#    apt:
#      update_cache: yes

  - name: "APT - Add Docker GPG key"
    apt_key:
#      url: https://download.docker.com/linux/ubuntu/dists/bionic/stable/binary-amd64/Release.gpg
#      url: https://download.docker.com/linux/ubuntu/gpg
      file: /home/lucas/devops-academy/gpg
      state: present
#      update_cache: key
#  - name: add apt-key
#    shell:

  - name: "APT - Add Docker repository"
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
      #      wget -O - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      state: present
      filename: docker

  - name: "APT - install misc packages"
    apt:
      name: ['aptitude', 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'gnupg2', 'pass']
      update_cache: yes


  - name: "APT - install 'docker-ce'"
    apt:
      name: "docker-ce"
      update_cache: yes

  - name: "update docker-compose"
    apt:
      name: "docker-compose"
      update_cache: yes
      state: latest

  - name: "allow the vagrant user to use docker"
    shell:
      usermod -aG docker vagrant
    become: yes



#  - name: "give /jenkins_home correct ownership"
#    shell:
#      chown -R 1000 /jenkins_home/
#    become: yes

#  - name: "edit daemon.json to export docker api"
#    shell:
#       'echo {"hosts": ["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]} >> /etc/docker/daemon.json'
#    become: yes

#  - name: "edit docker.service override.conf"
#    shell:
#      cp /vagrant/override.conf /etc/systemd/system/docker.service.d/override.conf
#    become: yes

#  - name: "reload daemon"
#    shell:
#       systemctl daemon-reload
#    become: yes
#
#  - name: restart docker service
#    shell:
#       systemctl restart docker.service
#    become: yes





#  - name: "Install JDK"
#    apt:
#      name: "openjdk-8-jdk"
#      update_cache: yes
#  - name: "install jdk through shell"
##    shell: sudo apt-get install openjdk-8-jdk -y
#
#  - name: "Add Jenkins key"
#    apt_key:
#      file: /vagrant/jenkins.io.key
      #url: "https://pkg.jenkins.io/debian/jenkins.io.key"
#      state: present
#
#  - name: "Add Jenkins repo"
#    apt_repository:
#      repo: "deb http://pkg.jenkins.io/debian-stable binary/"
#      state: present
#  - name: "Install Jenkins"
  #
  #  apt:
#      name: "jenkins"
#      update_cache: yes
#  - name: "Ensure Jenkins is running"
#    service:
#      ###
#      name: "jenkins"
#      state: started

#  - name: "Create docker group"
#    shell: "groupadd docker"
#    become: yes

#  - name: "Add jenkins to the group"
#    become: yes
    ##    shell: "gpasswd -a jenkins docker"

#  - name: "restart docker"
#    shell: "service docker restart"
#    become: yes
#
#  - name: "apply changes to groups"
#    shell: "newgrp docker"
#    become: yes
#
#  - name: "restart Jenkins"
#    service:
#      name: "jenkins"
#      state: restarted
#
# - name: docker-compose up
#   docker_compose:
#     project_src: /vagrant/
#     state: present

#por alguna razon tiene que correr el docker-compose al menos una vez para que funcione lo de exponer la API
  - name: stop docker
    shell: systemctl stop docker
    become: yes

  - name: expose docker API
    script:
      /vagrant/expose_docker.sh
    become: yes


#  - name: "generate a gpg2 key"
#    shell: gpg2 --full-generate-key
#This step needs to be done manually
#After this you need to gpg2 -k to list the key
#Copy the line labeled with [uid] into pass init "generated key"



#  name: play
#  hosts: localhost
#  tasks:
#    - command: echo HELLO
#  -  name: make mkdir
#     docker_container:
#       name: vagrant_php_1
#       command: mkdir /qqqq
